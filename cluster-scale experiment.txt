Experiment with scripted cluster autoscaler
===========================================

The requirement
---------------

The wish is that we can setup an environment to run the "hpa-php-apache + load" environment
on a k8s cluster just by scripting (except perhaps the load generator). When the loading starts,
the number of pods should increase as required. When the load is turned off, it should
decrease. The apache pods should run on their own t3.micro-based nodegroup. This should
have min 1. (Stretch goal, the nodegroup has min size 0 and should have no associated nodes
until the apache deployment is made)

Some notes
----------

* The cluster scaler deployments need at least 600m so won't run on a t3.micro node. Need to
at least allocated t3.small (the exercise before was m5.large)
* Assume we will use taint and toleration wrt to the new nodegroup.
* The deployment for the autoscaler in instructions to date seems finickity in that the
deployment script (so far https://raw.githubusercontent.com/kubernetes/autoscaler/refs/heads/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml) requires manual edit following deployment. Ideally want helm chart
but even then it requires knowledge of the current kubenetes version and the latest
deployment image for that.

Basic Approach
--------------

* Want cluster with managed nodes for the system pods, including autoscalers. Must
be at least "small" - so use t3.small. Make "managed" for good measure but not sure required.
* Create managed nodegroup for the app running t3.mobile. "ng-nginx"


Possible script
---------------

eksctl create cluster --name eksctl-test --nodegroup-name ng-default --node-type t3.small --nodes 2 --managed --asg-access
(don't use config file because that creates two cloudformation jobs and the delete does not work.
Note --asg-access required to run autoscaler on ng-default)
eksctl create nodegroup -f eks-create-app-ng.yml
(note min size set to 0 and desired size to 1 - we want a node to start with as that forms the template,
otherwise we need to add extra node-template labels to the nodegroup. TEMP SET MIN SIZE TO 1 UNTIL WORKING)

helm repo add autoscaler https://kubernetes.github.io/autoscaler
helm install autosc-release autoscaler/cluster-autoscaler \
    --set 'autoDiscovery.clusterName'=eksctl-test

kubectl apply -f hpa-php-apache.yaml
(when we did orig, just with toleration and not affinity, it ran the first pod on ng-default.
Added affinity at which point it said it did not have a valid node to run on. Ended up disabling
taing on the nodegroup)

Run:
kubectl get hpa
Wait until the pod Target CPU stops showing "unknown"

Then do the:
    kubectl run -i --tty --rm load-generator --image=busybox sh
    while sleep 0.01; do wget -q -O- http://php-apache; done

kubectl get hpa
kubectl get nodes -l application=nginx
kubectl get pods -l run=php-apache
eksctl get nodegroup --cluster eksctl-test
(Eventually settle down with 4 php-apache nodes and 2 of the app/ng-application pods)

Cntrl-C the busybox
hpa usage should drop to 0%
Eventually number of pods should drop to 1
Wait 10 min or so
The number of app nodes will also drop to 1
